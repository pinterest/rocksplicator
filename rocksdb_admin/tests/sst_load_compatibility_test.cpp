/// Copyright 2016 Pinterest Inc.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
/// http://www.apache.org/licenses/LICENSE-2.0

/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.

//
// @author bol (bol@pinterest.com) 
//

#include <memory>
#include <string>

#include "gtest/gtest.h"
#include "rocksdb/db.h"

static const std::string kNewBinary =
  "/rocksplicator/build/rocksdb_admin/tests/sst_binary";
static const std::string kNewData =
  "/rocksplicator/build/rocksdb_admin/tests/sst_data.sst";
static const std::string kOldBinary =
  "LD_LIBRARY_PATH=/rocksplicator/rocksdb_admin/tests/ "
  "/rocksplicator/rocksdb_admin/tests/old_sst_binary";
static const std::string kOldData =
  "/rocksplicator/rocksdb_admin/tests/old_sst_data.sst";


static const int kNumKeys = 10;

/*
 * This test is to verify the compatibility of SST files generated by
 * SstFileWriter among different RocksDB versions.
 * When a new rocksdb version is used. The test will genreate a sst file and
 * a verifying binary with new the rocksdb version. And then verify if the
 * old (new) binary is able to work with new (old) sst file.
 *
 * @note Once passed. please do the following in the docker environment to make
 * sure the verification setup is updated accordingly for the next RocksDB
 * upgrade.
 *
 * "cp rocksdb_admin/tests/sst_binary ../rocksdb_admin/tests/old_sst_binary"
 * "cp rocksdb_admin/tests/sst_data.sst ../rocksdb_admin/tests/old_sst_data.sst"
 * update librocksdb.so.*.* in ../rocksdb_admin/tests/
 */
void GenerateNewData() {
  rocksdb::Options options;
  rocksdb::SstFileWriter sst_writer(rocksdb::EnvOptions(), options,
                                    options.comparator);
  auto status = sst_writer.Open(kNewData);
  EXPECT_TRUE(status.ok());

  for (int i = 0; i < kNumKeys; ++i) {
    status = sst_writer.Add("key" + std::to_string(i),
                            "value" + std::to_string(i));
    EXPECT_TRUE(status.ok());
  }

  status = sst_writer.Finish();
  EXPECT_TRUE(status.ok());
}

TEST(SstLoadCompactibilityTest, NewBinaryAndNewData) {
  std::string cmd = kNewBinary + " " + kNewData;
  EXPECT_EQ(system(cmd.c_str()), 0);
}

TEST(SstLoadCompactibilityTest, NewBinaryAndOldData) {
  std::string cmd = kNewBinary + " " + kOldData;
  EXPECT_EQ(system(cmd.c_str()), 0);
}

TEST(SstLoadCompactibilityTest, OldBinaryAndOldData) {
  std::string cmd = kOldBinary + " " + kOldData;
  EXPECT_EQ(system(cmd.c_str()), 0);

}

TEST(SstLoadCompactibilityTest, OldBinaryAndNewData) {
  std::string cmd = kOldBinary + " " + kNewData;
  EXPECT_EQ(system(cmd.c_str()), 0);
}

int main(int argc, char** argv) {
  ::testing::InitGoogleTest(&argc, argv);
  GenerateNewData();
  return RUN_ALL_TESTS();
}
